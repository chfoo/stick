<?xml version="1.0" encoding="UTF-8"?>
<config>
    <!-- Name of the generated dynamic library. It doesn't have to match the library being binded. -->
    <cLibraryName>pumpkin</cLibraryName>

    <!-- C header filename of the library -->
    <cLibraryInclude>pumpkin.h</cLibraryInclude>

    <!-- A prefix for the wrapper function names generated by Stick -->
    <cNativePrefix>stick_native_</cNativePrefix>

    <!-- Filename path of the generated output wrapper C file -->
    <cNativeOutput>gen/pumpkin_stick_wrapper.c</cNativeOutput>

    <!-- Package name of the extern class. It doesn't have to match the library being binded. -->
    <haxePackage>pumpkin</haxePackage>

    <!-- Name of the generated extern class -->
    <haxeExternClass>PumpkinExtern</haxeExternClass>

    <!-- Filename path of the generated output wrapper Haxe file -->
    <haxeExternOutput>gen/pumpkin/PumpkinExtern.hx</haxeExternOutput>

    <!-- Injection of Haxe code, above the extern class, that specifies where to include hxcpp build file -->
    <cppInject>
        <![CDATA[
        #if haxelib
        @:buildXml("<include name=\"${haxelib:pumpkin}/path/to/hxcpp_build.xml\" />")
        #else
        // `this_dir` is the hxcpp outout directory
        @:buildXml("<include name=\"${this_dir}/../../hxcpp_build.xml\" />")
        #end
    ]]>
    </cppInject>
</config>
